@model ChartData
@{
    ViewData["Title"] = Model.SecId;
    string enabled = "disabled", title = "Для добавления актива в портфель необходимо войти в аккаунт";
    if (User.Identity.Name != null)
    {
        enabled = "enabled";
        title = "Добавить актив в портфель";
    }
}
<link rel="stylesheet" href="~/css/chart.css" asp-append-version="true" />
<table width="100%" border="0">
    <tr>
        <td valign="top">
            <form method="post">
                <div align="center" class="emitent_info">
                    <h3><input name="secId" value="@Model.SecId" class="read" readonly/></h3>
                    <h3><input name="secName" value="@Model.SecName" class="read" readonly/></h3>
                    <h2><input name="lastPrice" value="@Model.LastPrice" class="read" size="5" readonly/> RUB</h2>

                    <font size="2" color="green">@Model.LastChange</font>
                    <font size="2" style="color: orange"> Держать</font>
                
                    <button name="addStock" type="submit" @enabled title="@title">Добавить актив</button>
                    <a id="adding" data-add="-1" style="color: #f70a1a"> − </a>
                    <font size="3">
                        <input id="stockAmount" name="amount" value="@Model.Amount" class="write" type="number" min="1" max="100" size="1" align="center"/>
                    </font>
                    <a id="adding" data-add="1"> + </a>
                
                </div>
                
            </form>
        </td>
        <td>
            <div align="right" width="100%" style="margin-right: 70px;">
              <div class="chart" align="center">
                <canvas id="stocksCanvas" width="800" height="500"></canvas>
              </div>
            </div>
        </td>
    </tr>
</table>

@*<h2>@Model.Secid</h2>*@
<h2>Стоимость акции: @ViewBag.Info</h2>
@*<h2 id="check">asd</h2>*@

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
@section Scripts{
    <script>
        document.addEventListener('DOMContentLoaded', init, false);

        let canvas, secid;
        let dates = [];
        let prices = [];
        let forecastedPrices = [];
        let check = document.querySelector('#check');

        async function init() {
            canvas = document.getElementById("stocksCanvas");
            secid = '@Model.SecId';

            let fullDates = [];
            fullDates = @(Html.Raw(Json.Serialize(Model.Dates)));
            prices = @(Html.Raw(Json.Serialize(Model.Prices)));
            forecastedPrices = @(Html.Raw(Json.Serialize(Model.ForecastedPrices)));
            formatDates(fullDates);
            drawChart();
        }

        function formatDates(fullDates){
            fullDates.forEach(c => {
            dates.push(new Date(c).toLocaleDateString());
            });
        }

        function drawChart(){
            var config = {
            type: 'line',
            data: {
                labels: dates,
                datasets: [
                {
                    data: prices,
                    fill: false,
                    borderColor: 'rgba(0, 0, 255, 0.4)',
                    borderWidth: 2,
                    backgroundColor: 'rgba(0, 0, 255, 1)',
                    //pointBackgroundColor: 'rgba(255, 0, 0, 0.5)',
                    pointBorderColor: 'rgba(255, 255, 255, 1)',
                    pointBorderWidth: 1,
                    pointHoverBackgroundColor: 'rgba(255, 100, 0, 0.8)',
                    pointHoverBorderColor: 'rgba(255, 100, 0, 0.8)',
                    pointHoverBorderWidth: 0,
                    lineTension: 0,
                },
                {
                    data: forecastedPrices,
                    fill: false,
                    borderColor: 'rgba(0, 200, 0, 0.5)',
                    borderWidth: 1,
                    backgroundColor: 'rgba(0, 200, 0, 0.5)',
                    lineTension: 0,
                    pointHoverBackgroundColor: 'rgba(255, 100, 0, 0.8)',
                    pointHoverBorderColor: 'rgba(255, 100, 0, 0.8)',
                }
                ]
            },
            options:{
                responsive: false,
                legend: {
                    display: false,
                },
                title: {
                    display: true,
                    text: secid
                },
                tooltips: {
      	        backgroundColor: 'rgba(10, 10, 100, 0.7)',
                displayColors: false,
                bodyFontSize: 14,
                // bodyColor: 'rgba(255, 0, 0, 1)',
                callbacks: {
                    label: function(tooltipItems, data) { 
                    return tooltipItems.yLabel + ' RUB';
                    }
                }
                },
                scales: {
                xAxes: [{
                    display: true,
                    ticks: {
                    backdropColor: 'rgba(255, 0, 0, 1)',
                    callback: function(value, index, ticks) {
                        return index % 4 === 0 || index == ticks.length - 1  ? value : '';
                    }
                    },
                }],
                yAxes: [{
                    display: true,
                    position: "right",
                    color: 'red',
                }]
                },
            }
            }
            window.chart = new Chart(canvas, config);
        }

        document.querySelectorAll('#adding').forEach(t => {
            t.addEventListener('click', changeAmount, false);
        });

        let amount = 1;
        function changeAmount(e) {
          if (e.target.dataset.add == -1 && amount > 1){
            amount--;
            document.querySelector("#stockAmount").value = amount;
          }
          else if (e.target.dataset.add == 1) {
            amount++;
            document.querySelector("#stockAmount").value = amount;
          }
        }
    </script>
}